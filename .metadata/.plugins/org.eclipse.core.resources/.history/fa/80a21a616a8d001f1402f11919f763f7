package com.zeotap.main.controller;

import java.util.*;
import java.util.StringTokenizer;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.zeotap.main.entity.Node;
import com.zeotap.main.entity.RuleEngine;
import com.zeotap.main.models.Rule;
import com.zeotap.main.service.NodeService;
import com.zeotap.main.service.RuleEngineService;

@Controller
@CrossOrigin(origins = "http://localhost:3000")
public class RuleEngineController {
	
	private RuleEngineService ruleEngineService;
	private NodeService nodeService;
	
	public RuleEngineController(RuleEngineService ruleEngineService, NodeService nodeService) {
		super();
		this.ruleEngineService = ruleEngineService;
		this.nodeService = nodeService;
	}
	
	@PostMapping("rule_engine/create_rule")
	@ResponseBody
	public ResponseEntity<Node> create_rule(@RequestParam String rule) {
	    // Check if the rule already exists
	    RuleEngine existingRuleEngine = ruleEngineService.getByRule(rule);
	    if (existingRuleEngine != null) {
	        // Return existing root node along with a message
	        return ResponseEntity.status(HttpStatus.CONFLICT).body(existingRuleEngine.getRoot());
	    }

	    final String Clause = "AND OR WHERE WITH AS HAVING";
	    StringTokenizer tokens = new StringTokenizer(rule, " ()", true);
	    Stack<Node> operator_stack = new Stack<>();
	    Stack<Node> node_stack = new Stack<>();

	    while (tokens.hasMoreElements()) {
	        String s = tokens.nextToken();
	        if (s.equals("(") || s.equals(" ")) {
	            continue;
	        } else if (s.equals(")")) {
	            if (!operator_stack.isEmpty()) {
	                Node temp = operator_stack.pop();
	                temp.setRight(node_stack.pop());
	                temp.setLeft(node_stack.pop());
	                temp = nodeService.saveNode(temp);
	                node_stack.push(temp);
	            }
	        } else if (Clause.contains(s)) {
	            Node temp = new Node("operator", s);
	            temp = nodeService.saveNode(temp);
	            operator_stack.push(temp);
	        } else if (">=<=".contains(s)) {
	            Node temp = new Node("operand", s);
	            temp.setLeft(node_stack.pop());
	            tokens.nextToken(); // Skip the operand
	            Node rightNode = new Node("", tokens.nextToken());
	            temp.setRight(rightNode);
	            temp = nodeService.saveNode(temp);
	            node_stack.push(temp);
	        } else {
	            Node temp = new Node("", s);
	            temp = nodeService.saveNode(temp);
	            node_stack.push(temp);
	        }
	    }

	    while (!operator_stack.isEmpty()) {
	        Node temp = operator_stack.pop();
	        temp.setRight(node_stack.pop());
	        temp.setLeft(node_stack.pop());
	        temp = nodeService.updateNode(temp);
	        node_stack.push(temp);
	    }

	    Node root = node_stack.isEmpty() ? null : node_stack.peek();
	    RuleEngine newRuleEngine = new RuleEngine(rule, root);
	    newRuleEngine = ruleEngineService.saveRuleEngine(newRuleEngine);

	    return ResponseEntity.ok(root); // Return the newly created root node
	}

	@PostMapping("rule_engine/combine_rules")
	@ResponseBody
	public Node combine_rule(@RequestBody List<String> rules) {
	    Node root = null;

	    for (String rule : rules) {
	        // Call create_rule method and capture the response
	        ResponseEntity<Node> responseEntity = create_rule(rule);

	        // Check the status of the response
	        if (responseEntity.getStatusCode() == HttpStatus.OK) {
	            // If the rule was created successfully, get the new root
	            Node newRule = responseEntity.getBody();
	            if (root == null) {
	                root = newRule; // Initialize root with the first rule
	            } else {
	                // Combine the current root with the new rule using an OR operator
	                Node orNode = new Node("operator", "OR");
	                orNode.setLeft(root);
	                orNode.setRight(newRule);
	                nodeService.saveNode(orNode);
	                root = orNode; // Update root to the new combined node
	            }
	        } else if (responseEntity.getStatusCode() == HttpStatus.CONFLICT) {
	            // If the rule already exists, get the existing root
	            Node existingRule = responseEntity.getBody();
	            if (root == null) {
	                root = existingRule; // Initialize root with the existing rule
	            } else {
	                // Combine the current root with the existing rule using an OR operator
	                Node orNode = new Node("operator", "OR");
	                orNode.setLeft(root);
	                orNode.setRight(existingRule);
	                nodeService.saveNode(orNode);
	                root = orNode; // Update root to the new combined node
	            }
	        } else {
	            // Handle unexpected status codes if needed (e.g., log an error)
	            throw new RuntimeException("Error creating rule: " + rule);
	        }
	    }

	    return root; // Return the final combined root node
	}
	
	@PostMapping("rule_engine/evaluate_rule")
	public ResponseEntity<Boolean> evaluate_rule(@RequestBody Rule data)
	{
		List<RuleEngine> list = ruleEngineService.getAllRuleEngine();
		Map<String,String> map = data.toHashMap();
		
		for(RuleEngine re :list)
			if(evaluate_rule_fun(re.getRoot(),map))
				return ResponseEntity.ok(true);
		
		return ResponseEntity.ok(false);
		
	}
	static boolean evaluate_rule_fun(Node root,Map<String, String> data)
	{
		if(root==null)
			return true;
		 if (root.getType().equals("operator")) 
		 {
		        boolean leftEval = evaluate_rule_fun(root.getLeft(), data);
		        boolean rightEval = evaluate_rule_fun(root.getRight(), data);
		        switch (root.getValue()) 
		        {
		            case "AND":
		                return leftEval && rightEval;
		            case "OR":
		                return leftEval || rightEval;
		            default:
		                throw new UnsupportedOperationException("Unknown operand: " + root.getValue());
		        }
		 }
		 else if (root.getType().equals("operand")) 
		 {
		        String leftVal = root.getLeft().getValue();  
		        String rightVal = root.getRight().getValue();
		        String actualData = data.get(leftVal);
		        switch (root.getValue()) 
		        {
		            case ">":
		                return rightVal.compareTo(actualData)<0;
		            case "<":
		                return rightVal.compareTo(actualData)>0;
		            case "=":
		                return rightVal.contains(actualData);
		            case ">=":
		                return Integer.parseInt(actualData) >= Integer.parseInt(rightVal);
		            case "<=":
		                return Integer.parseInt(actualData) <= Integer.parseInt(rightVal);
		            default:
		                throw new UnsupportedOperationException("Unknown comparison operator: " + root.getValue());
		        }
		    }
		    return false; 
	}
}
